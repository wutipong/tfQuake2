// Underwater screen warp effect similar to what software renderer provides

PUSH_CONSTANT(uRootConstants, b1)
{
	DATA(float, time, None);
	DATA(float, scale, None);
	DATA(float, scrWidth, None);
	DATA(float, scrHeight, None);
	DATA(float4, pad, None);
};

RES(Tex2D(float4), sTexture, UPDATE_FREQ_NONE, t1, binding = 1);
RES(Tex2D(float4), sLightmap, UPDATE_FREQ_PER_BATCH, t2, binding = 2);
RES(SamplerState,  textureSampler, UPDATE_FREQ_NONE, s0, binding = 7);

#define PI 3.1415

STRUCT(VSOutput)
{
	DATA(float4, position, SV_Position);
};

float4 PS_MAIN( VSOutput In )
{
    INIT_MAIN;

    float2 uv = float2(In.position.x / Get(scrWidth), In.position.y / Get(scrHeight));

	if (Get(time) > 0)
	{
		float sx = Get(scale) - abs(Get(scrWidth)  / 2.0 - In.position.x) * 2.0 / Get(scrWidth);
		float sy = Get(scale) - abs(Get(scrHeight) / 2.0 - In.position.y) * 2.0 / Get(scrHeight);
		float xShift = 2.0 * Get(time) + uv.y * PI * 10;
		float yShift = 2.0 * Get(time) + uv.x * PI * 10;
		float2 distortion = float2(sin(xShift) * sx, sin(yShift) * sy) * 0.00666;

		uv += distortion;
	}

	RETURN(SampleTex2D(Get(sTexture), Get(textureSampler), uv));
}
